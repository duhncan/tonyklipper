# FromtonRouge's Tevo Tornado personal configuration file (bltouch
# connected to D11 + filament runout sensor connected to D19 + e3d-v6 extruder)
# This file contains common pin mappings for RAMPS (v1.3 and later)
# boards. RAMPS boards typically use a firmware compiled for the AVR
# atmega2560 (though other AVR chips are also possible).

# See the example.cfg file for a description of available parameters.

[bltouch]
sensor_pin: PD3
control_pin: PB5
x_offset: 33
y_offset: -2

[homing_override]
set_position_z: 15
axes: z
gcode:
    G90
    G1 Z30 F480
    G28 X0 Y0
    G1 X150 Y150 F3600
    G28 Z0
    G1 Z50 F480

[bed_mesh]
speed: 150
horizontal_move_z: 5
mesh_min: 33,40
mesh_max: 298,288
probe_count: 3,3
mesh_pps: 2,2

[stepper_x]
step_pin: PF0
dir_pin: !PF1
enable_pin: !PD7
microsteps: 16
# For TMC2208 at 1/16 microsteps with 80 steps/mm
# Don't use a calibrated value, use the theorical value only otherwise 
# the TMC2208 may stop working while printing
# rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>
# rotation_distance = 200 * 16 / 80
rotation_distance: 40
endstop_pin: ^!PE5
position_endstop: 0
position_max: 300
homing_speed: 60

[stepper_y]
step_pin: PF6
dir_pin: !PF7
enable_pin: !PF2
microsteps: 16
# For TMC2208 at 1/16 microsteps with 80 steps/mm
# Don't use a calibrated value, use the theorical value only otherwise 
# the TMC2208 may stop working while printing
# rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>
# rotation_distance = 200 * 16 / 80
rotation_distance: 40
endstop_pin: ^!PJ1
position_endstop: 0
position_max: 300
homing_speed: 60

[stepper_z]
step_pin: PL3
dir_pin: PL1
enable_pin: !PK0
microsteps: 16
# For TMC2208 at 1/16 microsteps with 400 steps/mm
# Don't use a calibrated value, use the theorical value only otherwise 
# the TMC2208 may stop working while printing
# rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>
# rotation_distance = 200 * 16 / 400
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 300
homing_speed: 8

# TMC2208 UART configuration
[tmc2208 stepper_x]
uart_pin: PK1
# tx_pin aka the pin with the 1K resistor
tx_pin: PG1
run_current: 0.600
stealthchop_threshold: 260

[tmc2208 stepper_y]
uart_pin: PK2
# tx_pin aka the pin with the 1K resistor
tx_pin: PF5
run_current: 0.600
stealthchop_threshold: 260

[tmc2208 stepper_z]
uart_pin: PK3
# tx_pin aka the pin with the 1K resistor
tx_pin: PL7
run_current: 0.600
stealthchop_threshold: 30

# LV8729 at 1/32 microsteps
[extruder]
step_pin: PA4
dir_pin: PA6
enable_pin: !PA2
microsteps: 32
# For LV8729 at 1/32 microsteps with a Bondtech BMG extruder : 830 steps/mm
# rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>
# rotation_distance = 200 * 32 / 830
rotation_distance: 7.710843
nozzle_diameter: 0.400
filament_diameter: 1.7
# Simplify3D needs a high cross section for rafts
max_extrude_cross_section: 2
max_extrude_only_distance: 101
heater_pin: PB4
sensor_type: ATC Semitec 104GT-2
sensor_pin: PK5
min_temp: 5
max_temp: 285
pressure_advance: 0.05

[heater_fan extruder_fan]
pin: PH4
heater: extruder
heater_temp: 50.0

[heater_bed]
heater_pin: PH5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK6
min_temp: 0
max_temp: 130

[fan]
pin: PH6

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0

[printer]
kinematics: cartesian
max_velocity: 250
max_z_velocity: 25
max_accel: 2000
max_z_accel: 120

[virtual_sdcard]
path: ~/.octoprint/uploads/

# "RepRapDiscount 128x64 Full Graphic Smart Controller" type displays
[display]
lcd_type: st7920
cs_pin: PH1
sclk_pin: PA1
sid_pin: PH0
encoder_pins: ^PC6, ^PC4
click_pin: ^!PC2
kill_pin: ^!PG0
menu_root: __main
menu_timeout: 40

# Beeper pin
[output_pin BEEPER_pin]
pin: PC0
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1000

# Filament runout sensor settings, the runout sensor MUST be a normally closed switch
[pause_resume]
[filament_switch_sensor runout_sensor]
switch_pin: PD2
pause_on_runout: False
pause_delay: .0001
runout_gcode:
    SET_IDLE_TIMEOUT TIMEOUT=86400
    M600
    M117 Filament Runout
insert_gcode:
    SET_IDLE_TIMEOUT TIMEOUT=2400
    M300

# Gcode for clearing the display
[delayed_gcode clear_display]
gcode:
    M117

# Gcode executed when the printer is ready
[delayed_gcode on_ready]
initial_duration: 1
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=2400
    M117 Tornado Ready
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10

# Fake macros to avoid warnings
[gcode_macro SNAP]
gcode:

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
    M83
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_state
    M83
    G1 E50 F1000
    G1 E50 F300
    G1 E100 F300
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state

[gcode_macro PRIME_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=PRIME_FILAMENT_state
    M83
    G1 E100 F300
    RESTORE_GCODE_STATE NAME=PRIME_FILAMENT_state

[gcode_macro PARK]
gcode:
	{% set X = params.X|default(8)|float %}
	{% set Y = params.Y|default(27)|float %}
	{% set Z = params.Z|default(20)|float %}
    SAVE_GCODE_STATE NAME=PARK_state
    G91
    G1 E-2.0 F3000
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    RESTORE_GCODE_STATE NAME=PARK_state

[gcode_macro CHANGE_FILAMENT]
variable_enabled: 0
gcode:
    {% if printer["gcode_macro CHANGE_FILAMENT"].enabled %}
        PAUSE
        PARK
        G91
        G1 E-100 F1000
        M117 Change Filament
        PLAY_ANNOYING_BEEPS
    {% endif %}
    SET_GCODE_VARIABLE MACRO=CHANGE_FILAMENT VARIABLE=enabled VALUE=0

# WARNING: To work properly you have to add CHANGE_FILAMENT to the after print 
# job is paused gcode script in Octoprint (please see https://github.com/KevinOConnor/klipper/issues/1863)
[gcode_macro M600]
gcode:
    SET_GCODE_VARIABLE MACRO=CHANGE_FILAMENT VARIABLE=enabled VALUE=1
    {% if printer.virtual_sdcard.progress %}
        CHANGE_FILAMENT
    {% else %}
        {action_respond_info('action:pause')}
    {% endif %}

[gcode_macro M201]
gcode:

[gcode_macro M202]
gcode:

[gcode_macro M203]
gcode:

[gcode_macro M205]
gcode:

[gcode_macro M108]
gcode:

# Add the M300 standard gcode (beep)
[gcode_macro M300]
gcode:
	{% set S = params.S|default(1000)|float %}
	{% set P = params.P|default(100)|float %}
    SET_PIN PIN=BEEPER_pin VALUE={S}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

# Macro used by the "Prusa Mesh Map" Octoprint plugin
[gcode_macro G80]
gcode:
    BED_MESH_CALIBRATE
    G1 X150 Y150 Z50 F3600
 
# Macro used by the "Prusa Mesh Map" Octoprint plugin
[gcode_macro G81]
gcode:
    BED_MESH_OUTPUT

[gcode_macro PLAY_ANNOYING_BEEPS]
gcode:
    M300 P1000 S1000
    M300 P1000 S0
    M300 P1000 S1000
    M300 P1000 S0
    M300 P1000 S1000
    M300 P1000 S0

[gcode_macro START_PRINT]
gcode:
    CLEAR_PAUSE
    M83
    G28 ; home all axes
    G1 X1.0 Y110.0 F3000
    G1 Z0.45 F400 ; get ready to prime
    G92 E0 ; reset extrusion distance
    G1 Y5.0 E22 F600 ; prime nozzle
    G1 X10.0 E2 F600 ; prime nozzle
    G1 X40.0 F14000 ; quick wipe

[gcode_macro END_PRINT]
gcode:
    G28 X0 ; home x axis
    G1 Y295 Z50 F3000 ; bring the bed forward
    M106 S0 ; turn off cooling fan
    M104 S0 ; turn off extruder
    M140 S0 ; turn off bed
    M84 ; disable motors


### Menu from klippy/extras/display/menu.cfg with personal tweaks
# See the "example-menu.cfg" file for description of common config parameters.

### menu main ###
[menu __main]
type: list
name: Main

### menu tune ###
[menu __main __tune]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Tune

[menu __main __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1


### menu octoprint ###
[menu __main __octoprint]
type: list
name: OctoPrint

[menu __main __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    PAUSE

[menu __main __octoprint __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode:
    RESUME
    M117

[menu __main __octoprint __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Abort printing
gcode:
    {action_respond_info('action:cancel')}

### menu virtual sdcard ###
[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: SD Card

[menu __main __sdcard __start]
type: command
enable: {('virtual_sdcard' in printer) and not printer.idle_timeout.state == "Printing"}
name: Start printing
gcode: M24

[menu __main __sdcard __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode: M24

[menu __main __sdcard __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode: M25

### menu control ###
[menu __main __control]
type: list
name: Control

[menu __main __control __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home All
gcode: G28

[menu __main __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __main __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __main __control __disable]
type: command
name: Steppers off
gcode:
    M84
    M18

[menu __main __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'%3d' % (menu.input*100)}%
input: {printer['output_pin caselight'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode:
    SET_PIN PIN=caselight VALUE={menu.input}

### menu move 10mm ###
[menu __main __control __move_10mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 10mm

[menu __main __control __move_10mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: 0
input_max: 200
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: 0
input_max: 200
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: 200
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -50
input_max: 50
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __main __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 1mm

[menu __main __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: 0
input_max: 200
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: 0
input_max: 200
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: 200
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -50
input_max: 50
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __main __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: 0
input_max: 200
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: 0
input_max: 200
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: 200
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -50
input_max: 50
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu temperature ###
[menu __main __temp]
type: list
name: Temperature

[menu __main __temp __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __temp __hotend1_target]
type: input
enable: {'extruder1' in printer}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __main __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main __temp __preheat_pla]
type: list
name: Preheat PLA

[menu __main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S200

[menu __main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S200

[menu __main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S60

[menu __main __temp __preheat_abs]
type: list
name: Preheat ABS

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S245

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S245

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S110

[menu __main __temp __cooldown]
type: list
name: Cooldown

[menu __main __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown all
gcode:
    M104 S0
    M140 S0

[menu __main __temp __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Cooldown hotend
gcode: M104 S0

[menu __main __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Cooldown hotbed
gcode: M140 S0

### menu filament ###

[menu __main __filament]
type: list
name: Filament

[menu __main __filament __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type: command
name: Load Fil. fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E60 F1000
    G1 E40 F300
    G1 E100 F300
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type: command
name: Load Fil. slow
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type: command
name: Unload Fil.fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type: command
name: Unload Fil.slow
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type: input
name: Feed: {'%.1f' % menu.input}
input: 5
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F60
    RESTORE_GCODE_STATE NAME=__filament__load

### menu setup ###
[menu __main __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __main __setup __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __main __setup __restart]
type: list
name: Restart

[menu __main __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
gcode: RESTART

[menu __main __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __main __setup __tuning]
type: list
name: PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type: list
name: Calibration

[menu __main __setup __calib __delta_calib_auto]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Delta cal. auto
gcode:
    G28
    DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Delta cal. man

[menu __main __setup __calib __bedprobe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Bed probe
gcode: PROBE

[menu __main __setup __calib __delta_calib_man __start]
type: command
name: Start probing
gcode:
    G28
    DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type: command
name: Abort
gcode: ABORT

[menu __main __setup __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 25.477
#*# pid_ki = 1.213
#*# pid_kd = 133.753
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 54.140
#*# pid_ki = 0.843
#*# pid_kd = 868.941
#*#
#*# [bltouch]
#*# z_offset = 1.413
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.022500, 0.082500, -0.005000
#*# 	-0.132500, 0.040000, -0.015000
#*# 	-0.410000, -0.085000, -0.072500
#*# tension = 0.2
#*# min_x = 33.0
#*# algo = lagrange
#*# y_count = 3
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 3
#*# max_y = 288.0
#*# mesh_x_pps = 2
#*# max_x = 298.0
